/*-
 * #%L
 * BroadleafCommerce Common Libraries
 * %%
 * Copyright (C) 2009 - 2024 Broadleaf Commerce
 * %%
 * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0
 * (the "Fair Use License" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)
 * unless the restrictions on use therein are violated and require payment to Broadleaf in which case
 * the Broadleaf End User License Agreement (EULA), Version 1.1
 * (the "Commercial License" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)
 * shall apply.
 * 
 * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the "Custom License")
 * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.
 * #L%
 */
package org.broadleafcommerce.common.security.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;
import org.broadleafcommerce.common.exception.ServiceException;
import org.junit.Test;

public class ExploitProtectionServiceImplDiffblueTest {
  /**
   * Test {@link ExploitProtectionServiceImpl#cleanString(String)}.
   * <ul>
   *   <li>Given {@link ExploitProtectionServiceImpl} (default constructor).</li>
   *   <li>When {@code String}.</li>
   *   <li>Then return {@code String}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#cleanString(String)}
   */
  @Test
  public void testCleanString_givenExploitProtectionServiceImpl_whenString_thenReturnString() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertEquals("String", (new ExploitProtectionServiceImpl()).cleanString("String"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#cleanString(String)}.
   * <ul>
   *   <li>When empty string.</li>
   *   <li>Then return empty string.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#cleanString(String)}
   */
  @Test
  public void testCleanString_whenEmptyString_thenReturnEmptyString() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertEquals("", exploitProtectionServiceImpl.cleanString(""));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#cleanString(String)}.
   * <ul>
   *   <li>When null.</li>
   *   <li>Then return empty string.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#cleanString(String)}
   */
  @Test
  public void testCleanString_whenNull_thenReturnEmptyString() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertEquals("", exploitProtectionServiceImpl.cleanString("\u0000"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#cleanString(String)}.
   * <ul>
   *   <li>When {@code String}.</li>
   *   <li>Then return {@code String}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#cleanString(String)}
   */
  @Test
  public void testCleanString_whenString_thenReturnString() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertEquals("String", exploitProtectionServiceImpl.cleanString("String"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}.
   * <ul>
   *   <li>Given {@link ExploitProtectionServiceImpl} (default constructor).</li>
   *   <li>Then return {@code String}.</li>
   * </ul>
   * <p>
   * Method under test:
   * {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}
   */
  @Test
  public void testCleanStringWithResults_givenExploitProtectionServiceImpl_thenReturnString() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertEquals("String", (new ExploitProtectionServiceImpl()).cleanStringWithResults("String"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}.
   * <ul>
   *   <li>When empty string.</li>
   *   <li>Then return empty string.</li>
   * </ul>
   * <p>
   * Method under test:
   * {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}
   */
  @Test
  public void testCleanStringWithResults_whenEmptyString_thenReturnEmptyString() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertEquals("", exploitProtectionServiceImpl.cleanStringWithResults(""));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}.
   * <ul>
   *   <li>When {@code javascript}.</li>
   *   <li>Then throw {@link CleanStringException}.</li>
   * </ul>
   * <p>
   * Method under test:
   * {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}
   */
  @Test
  public void testCleanStringWithResults_whenJavascript_thenThrowCleanStringException() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertThrows(CleanStringException.class, () -> exploitProtectionServiceImpl.cleanStringWithResults("javascript"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}.
   * <ul>
   *   <li>When {@code String}.</li>
   *   <li>Then return {@code String}.</li>
   * </ul>
   * <p>
   * Method under test:
   * {@link ExploitProtectionServiceImpl#cleanStringWithResults(String)}
   */
  @Test
  public void testCleanStringWithResults_whenString_thenReturnString() throws ServiceException {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertEquals("String", exploitProtectionServiceImpl.cleanStringWithResults("String"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#hasHTMLTags(String)}.
   * <ul>
   *   <li>When {@code Text}.</li>
   *   <li>Then return {@code false}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#hasHTMLTags(String)}
   */
  @Test
  public void testHasHTMLTags_whenText_thenReturnFalse() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertFalse((new ExploitProtectionServiceImpl()).hasHTMLTags("Text"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#hasHTMLTags(String)}.
   * <ul>
   *   <li>When {@code <"U""U">}.</li>
   *   <li>Then return {@code true}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#hasHTMLTags(String)}
   */
  @Test
  public void testHasHTMLTags_whenUU_thenReturnTrue() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertTrue((new ExploitProtectionServiceImpl()).hasHTMLTags("<\"U\"\"U\">"));
  }

  /**
   * Test getters and setters.
   * <p>
   * Methods under test:
   * <ul>
   *   <li>{@link ExploitProtectionServiceImpl#setXssProtectionEnabled(boolean)}
   *   <li>{@link ExploitProtectionServiceImpl#getAntiSamyPolicyFileLocation()}
   *   <li>{@link ExploitProtectionServiceImpl#getCsrfTokenParameter()}
   * </ul>
   */
  @Test
  public void testGettersAndSetters() {
    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();

    // Act
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);
    String actualAntiSamyPolicyFileLocation = exploitProtectionServiceImpl.getAntiSamyPolicyFileLocation();

    // Assert that nothing has changed
    assertEquals("antisamy-myspace.xml", actualAntiSamyPolicyFileLocation);
    assertEquals("csrfToken", exploitProtectionServiceImpl.getCsrfTokenParameter());
  }

  /**
   * Test
   * {@link ExploitProtectionServiceImpl#setAntiSamyPolicyFileLocation(String)}.
   * <ul>
   *   <li>When {@code Anti Samy Policy File Location}.</li>
   * </ul>
   * <p>
   * Method under test:
   * {@link ExploitProtectionServiceImpl#setAntiSamyPolicyFileLocation(String)}
   */
  @Test
  public void testSetAntiSamyPolicyFileLocation_whenAntiSamyPolicyFileLocation() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertThrows(RuntimeException.class,
        () -> (new ExploitProtectionServiceImpl()).setAntiSamyPolicyFileLocation("Anti Samy Policy File Location"));
  }

  /**
   * Test
   * {@link ExploitProtectionServiceImpl#setAntiSamyPolicyFileLocation(String)}.
   * <ul>
   *   <li>When {@code null}.</li>
   *   <li>Then throw {@link RuntimeException}.</li>
   * </ul>
   * <p>
   * Method under test:
   * {@link ExploitProtectionServiceImpl#setAntiSamyPolicyFileLocation(String)}
   */
  @Test
  public void testSetAntiSamyPolicyFileLocation_whenNull_thenThrowRuntimeException() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertThrows(RuntimeException.class,
        () -> (new ExploitProtectionServiceImpl()).setAntiSamyPolicyFileLocation(null));
  }

  /**
   * Test
   * {@link ExploitProtectionServiceImpl#setAntiSamyPolicyFileLocation(String)}.
   * <ul>
   *   <li>When {@code /}.</li>
   *   <li>Then throw {@link RuntimeException}.</li>
   * </ul>
   * <p>
   * Method under test:
   * {@link ExploitProtectionServiceImpl#setAntiSamyPolicyFileLocation(String)}
   */
  @Test
  public void testSetAntiSamyPolicyFileLocation_whenSlash_thenThrowRuntimeException() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertThrows(RuntimeException.class, () -> (new ExploitProtectionServiceImpl()).setAntiSamyPolicyFileLocation("/"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#htmlDecode(String)}.
   * <ul>
   *   <li>Given {@link ExploitProtectionServiceImpl} (default constructor).</li>
   *   <li>When {@code 42}.</li>
   *   <li>Then return {@code 42}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#htmlDecode(String)}
   */
  @Test
  public void testHtmlDecode_givenExploitProtectionServiceImpl_when42_thenReturn42() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange, Act and Assert
    assertEquals("42", (new ExploitProtectionServiceImpl()).htmlDecode("42"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#htmlDecode(String)}.
   * <ul>
   *   <li>When {@code 42}.</li>
   *   <li>Then return {@code 42}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#htmlDecode(String)}
   */
  @Test
  public void testHtmlDecode_when42_thenReturn42() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertEquals("42", exploitProtectionServiceImpl.htmlDecode("42"));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#htmlDecode(String)}.
   * <ul>
   *   <li>When {@code null}.</li>
   *   <li>Then return {@code null}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#htmlDecode(String)}
   */
  @Test
  public void testHtmlDecode_whenNull_thenReturnNull() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertNull(exploitProtectionServiceImpl.htmlDecode(null));
  }

  /**
   * Test {@link ExploitProtectionServiceImpl#htmlDecode(String)}.
   * <ul>
   *   <li>When {@code Value}.</li>
   *   <li>Then return {@code Value}.</li>
   * </ul>
   * <p>
   * Method under test: {@link ExploitProtectionServiceImpl#htmlDecode(String)}
   */
  @Test
  public void testHtmlDecode_whenValue_thenReturnValue() {
    //   Diffblue Cover was unable to create a Spring-specific test for this Spring method.

    // Arrange
    ExploitProtectionServiceImpl exploitProtectionServiceImpl = new ExploitProtectionServiceImpl();
    exploitProtectionServiceImpl.setXssProtectionEnabled(true);

    // Act and Assert
    assertEquals("Value", exploitProtectionServiceImpl.htmlDecode("Value"));
  }
}
